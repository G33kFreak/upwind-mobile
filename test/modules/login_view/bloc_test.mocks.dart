// Mocks generated by Mockito 5.1.0 from annotations
// in upwind/test/modules/login_view/bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dio/dio.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:upwind/src/repositories/authentication_repository/src/abstract_authentication_repository.dart'
    as _i3;
import 'package:upwind/src/repositories/tokens_repository/tokens_repository.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeTokens_0 extends _i1.Fake implements _i2.Tokens {}

/// A class which mocks [IAuthenticationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthenticationRepository extends _i1.Mock
    implements _i3.IAuthenticationRepository {
  MockIAuthenticationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Tokens> performLogIn({String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #performLogIn, [], {#email: email, #password: password}),
              returnValue: Future<_i2.Tokens>.value(_FakeTokens_0()))
          as _i4.Future<_i2.Tokens>);
  @override
  _i4.Future<void> logOut() =>
      (super.noSuchMethod(Invocation.method(#logOut, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}

/// A class which mocks [ITokensRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockITokensRepository extends _i1.Mock implements _i2.ITokensRepository {
  MockITokensRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set controller(_i4.StreamController<_i2.AuthenticationStatus>? _controller) =>
      super.noSuchMethod(Invocation.setter(#controller, _controller),
          returnValueForMissingStub: null);
  @override
  String get tokensKey =>
      (super.noSuchMethod(Invocation.getter(#tokensKey), returnValue: '')
          as String);
  @override
  _i4.Stream<_i2.AuthenticationStatus> get status =>
      (super.noSuchMethod(Invocation.getter(#status),
              returnValue: Stream<_i2.AuthenticationStatus>.empty())
          as _i4.Stream<_i2.AuthenticationStatus>);
  @override
  _i4.Future<_i2.Tokens?> getTokens() =>
      (super.noSuchMethod(Invocation.method(#getTokens, []),
          returnValue: Future<_i2.Tokens?>.value()) as _i4.Future<_i2.Tokens?>);
  @override
  _i4.Future<void> saveTokens(_i2.Tokens? tokens) =>
      (super.noSuchMethod(Invocation.method(#saveTokens, [tokens]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> clearTokens() =>
      (super.noSuchMethod(Invocation.method(#clearTokens, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i2.Tokens?> performRefreshTokens(_i5.Dio? httpClient,
          {String? refreshToken}) =>
      (super.noSuchMethod(
          Invocation.method(#performRefreshTokens, [httpClient],
              {#refreshToken: refreshToken}),
          returnValue: Future<_i2.Tokens?>.value()) as _i4.Future<_i2.Tokens?>);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [Tokens].
///
/// See the documentation for Mockito's code generation for more information.
class MockTokens extends _i1.Mock implements _i2.Tokens {
  MockTokens() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get accessToken =>
      (super.noSuchMethod(Invocation.getter(#accessToken), returnValue: '')
          as String);
  @override
  String get refreshToken =>
      (super.noSuchMethod(Invocation.getter(#refreshToken), returnValue: '')
          as String);
  @override
  bool get isInBox =>
      (super.noSuchMethod(Invocation.getter(#isInBox), returnValue: false)
          as bool);
  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  _i4.Future<void> save() => (super.noSuchMethod(Invocation.method(#save, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> delete() =>
      (super.noSuchMethod(Invocation.method(#delete, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}
